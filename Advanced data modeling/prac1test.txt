1)Create a table Product with ID and XML Document for Customer's order.

Create table Product(ID varchar2(10) PRIMARY KEY,CUST XMLTYPE);
// inserting values 
//row 1
insert into Product values(
1,XMLTYPE('
<CUSTOMER>
<CID>C001</CID>
<NAME>Ram</NAME>
<CITY>MUMBAI</CITY>
<ORDER>
 <OID>O001</OID>
 <ODATE>25/01/2006</ODATE>
 <ORDER_ITEM>
 <NAME>Mouse</NAME>
 <QTY>25</QTY>
 </ORDER_ITEM>
 <ORDER_ITEM>
 <NAME>KeyBoard</NAME>
 <QTY>25</QTY>
 </ORDER_ITEM>
</ORDER>
<ORDER>
 <OID>O002</OID>
 <ODATE>31/01/2006</ODATE>
 <ORDER_ITEM>
 <NAME>PenDrive</NAME>
 <QTY>2</QTY>
 </ORDER_ITEM>
 <ORDER_ITEM>
 <NAME>Modem</NAME>
 <QTY>10</QTY>
 </ORDER_ITEM> 
</ORDER>
</CUSTOMER>
')
);

//row 2
insert into Product values(
2,XMLTYPE('
<CUSTOMER>
<CID>C002</CID>
<NAME>Sam</NAME>
<CITY>MUMBAI</CITY>
<ORDER>
 <OID>O011</OID>
 <ODATE>25/01/2006</ODATE>
 <ORDER_ITEM>
 <NAME>Mouse</NAME>
 <QTY>25</QTY>
 </ORDER_ITEM>
 <ORDER_ITEM>
 <NAME>KeyBoard</NAME>
 <QTY>25</QTY>
 </ORDER_ITEM>
</ORDER>
<ORDER>
 <OID>O012</OID>
 <ODATE>31/01/2006</ODATE>
 <ORDER_ITEM>
 <NAME>PenDrive</NAME>
 <QTY>2</QTY>
 </ORDER_ITEM>
 <ORDER_ITEM>
 <NAME>Modem</NAME>
 <QTY>10</QTY>
 </ORDER_ITEM> 
</ORDER>
</CUSTOMER>
')
);
// row 3
insert into Product values(
3,XMLTYPE('
<CUSTOMER>
<CID>C003</CID>
<NAME>Tom</NAME>
<CITY>MUMBAI</CITY>
<ORDER>
 <OID>O031</OID>
 <ODATE>25/01/2006</ODATE>
 <ORDER_ITEM>
 <NAME>Mouse</NAME>
 <QTY>25</QTY>
 </ORDER_ITEM>
 <ORDER_ITEM>
 <NAME>KeyBoard</NAME>
 <QTY>25</QTY>
 </ORDER_ITEM>
</ORDER>
<ORDER>
 <OID>O032</OID>
 <ODATE>31/01/2006</ODATE>
 <ORDER_ITEM>
 <NAME>PenDrive</NAME>
 <QTY>2</QTY>
 </ORDER_ITEM>
 <ORDER_ITEM>
 <NAME>Modem</NAME>
 <QTY>10</QTY>
 </ORDER_ITEM> 
</ORDER>
</CUSTOMER>
')
);

3. Extract the XML fragment for order items for order no 'O001'
select p.CUST.extract('/CUSTOMER/ORDER[OID="O001"]').getStringVal() "Orders" from Product p;

4. Extract XML Fragment for orders of customers with customer_id='C0001'
select p.CUST.extract('/CUSTOMER[CID==C001]').getStringVal() "Orders" from Product p;

5. Insert a row with id=5 and nothing for Customers orders.
insert into Product values(
5,XMLTYPE('
<CUSTOMER>
<CID>C005</CID>
<NAME>John</NAME>
<CITY>MUMBAI</CITY>
</CUSTOMER>
')
);

6. Insert a row with no order date for on order. 
insert into Product values(
6,XMLTYPE('
<CUSTOMER>
<CID>C006</CID>
<NAME>Saly</NAME>
<CITY>MUMBAI</CITY>
<ORDER>
 <OID>O061</OID>
 <ODATE></ODATE>
 <ORDER_ITEM>
 <NAME>Mouse</NAME>
 <QTY>25</QTY>
 </ORDER_ITEM>
 <ORDER_ITEM>
 <NAME>KeyBoard</NAME>
 <QTY>25</QTY>
 </ORDER_ITEM>
</ORDER>
<ORDER>
 <OID>O062</OID>
 <ODATE></ODATE>
 <ORDER_ITEM>
 <NAME>PenDrive</NAME>
 <QTY>2</QTY>
 </ORDER_ITEM>
 <ORDER_ITEM>
 <NAME>Modem</NAME>
 <QTY>10</QTY>
 </ORDER_ITEM> 
</ORDER>
</CUSTOMER>
')
);

1. Select the rows with NULL in customers order node

select * from Product p where
p.CUST.extract('/CUSTOMER/ORDER').getStringVal() IS NULL;

2. Select a row with no order date:
select * from Product p where
p.CUST.extract('/CUSTOMER/ORDER/ODATE/text()').getStringVal() IS NULL;

3. Display the date on which order 'O001' was placed.
select p.CUST.extract('/CUSTOMER/ORDER[OID="O002"]/ODATE/text()').getStringVal()
from Product p;

4. Display the quantity of product 'Mouse' of order 'O001' as numeric.
Select p.CUST.extract('/CUSTOMER/ORDER[OID="O001"]/ORDER_ITEM[NAME="Mouse"]/QTY/text()').getNumberVal() “QUANTITY" from Product p;

5. Display the quantity of product 'Mouse' of order 'O001' without using extract() function
SELECT EXTRACTVALUE(CUST, '/CUSTOMER/ORDER[OID="O001"]/ORDER_ITEM[NAME="Mouse"]/QTY') "QUANTITY" FROM Product e;

6. Display the items ordered in the order 'O002' using ExtractValue() function.What is your observation Explain Why?
select p.CUST.extract('CUSTOMER/ORDER[OID="O002"]/ORDER_ITEM').getStringVal() "ORDER_ITEM" from Product p;

7. Extract dates of the orders for which they exist
select p.CUST.extract('/CUSTOMER/ORDER/ODATE/text()').getStringVal() from
Product p where p.CUST.extract('/CUSTOMER/ORDER/ODATE/text()') IS NOT
NULL;

Title(b): XML Databases
Question:-
Create a table employee having dept_id as number datatype and employee_spec as XML
datatype (XMLType).The employee_spec is a schema with attributes emp id, name,
email, acc_no, managerEmail, dateOf Joning .Insert 10 tuples into employee table. Fire
the following queries on XML database.
1)creating table
create table employee(dept_id number(5) PRIMARY KEY,employee_spec xmltype);

2) inserting records
insert into employee
values(001,
xmltype('<emp id="1">
<name>Adam</name>
<email>adam@mail.com</email>
<acc_no>1234</acc_no>
<mgremail>abc@yahoo.com</mgremail>
<doj>23-jul-2005</doj>
</emp>'));

insert into employee
values(002,
xmltype('<emp id="2">
<name>Bob</name>
<email>bob@mail.com</email>
<acc_no>5678</acc_no>
<mgremail>abc@yahoo.com</mgremail>
<doj>23-jul-2005</doj>
</emp>'));

insert into employee
values(003,
xmltype('<emp id="3">
<name>Cybil</name>
<email>cybil@mail.com</email>
<acc_no>9012</acc_no>
<mgremail>abc@yahoo.com</mgremail>
<doj>13-jul-2005</doj>
</emp>'));

insert into employee
values(004,
xmltype('<emp id="4">
<name>Dane</name>
<email>dane@mail.com</email>
<acc_no>3456</acc_no>
<mgremail>abc@yahoo.com</mgremail>
<doj>13-jul-2005</doj>
</emp>'));

insert into employee
values(005,
xmltype('<emp id="5">
<name>Emily</name>
<email>emily@mail.com</email>
<acc_no>7890</acc_no>
<mgremail>abc@yahoo.com</mgremail>
<doj>24-jul-2005</doj>
</emp>'));

insert into employee
values(006,
xmltype('<emp id="6">
<name>Frank</name>
<email>frank@mail.com</email>
<acc_no>9876</acc_no>
<mgremail>abc@yahoo.com</mgremail>
<doj>24-jul-2005</doj>
</emp>'));

insert into employee
values(007,
xmltype('<emp id="7">
<name>Gorge</name>
<email>gorge@mail.com</email>
<acc_no>5432</acc_no>
<mgremail>abc@yahoo.com</mgremail>
<doj>23-jul-2004</doj>
</emp>'));

insert into employee
values(008,
xmltype('<emp id="8">
<name>Hank</name>
<email>hank@mail.com</email>
<acc_no>1098</acc_no>
<mgremail>abc@yahoo.com</mgremail>
<doj>23-jul-2004</doj>
</emp>'));

insert into employee
values(009,
xmltype('<emp id="9">
<name>Igor</name>
<email>igor@mail.com</email>
<acc_no>7654</acc_no>
<mgremail>abc@yahoo.com</mgremail>
<doj>23-jul-2005</doj>
</emp>'));

insert into employee
values(010,
xmltype('<emp id="10">
<name>Jack</name>
<email>jack@mail.com</email>
<acc_no>3210</acc_no>
<mgremail>abc@yahoo.com</mgremail>
<doj>23-jul-2005</doj>
</emp>'));

Query 1:
 Retrieve the names of employee.
SQL Statement:-
select e.employee_spec.extract('emp/name/text()').getStringVal() "Employee_Name" from employee e;

Query 2:-
 Retrieve the acc_no of employee.
SQL Statement:-
select e.employee_spec.extract('emp/acc_no/text()').getStringVal() "Employee Account-No" from employee e;

Query 3:-
 Retrieve the names, acc_no, email of employees.
SQL Statement:-
select e.employee_spec.extract('emp/name/text()').getStringVal(), e.employee_spec.extract('emp/acc_no/text()').getStringVal(), e.employee_spec.extract('emp/email/text()').getStringVal() from employee e;

Query 4:-
 Update the 3rd record from the table and display the name of an employee.
SQL Statement:-
update employee e set employee_spec = xmltype ('<emp id="3"> <name>Tanmay Gurav</name> </emp>') where e.employee_spec.extract('//acc_no/text()').getStringVal()='9012';

//Display pending
select 
e.employee_spec.extract('emp/name/text()').getStringVal() 
from employee e 
where dept_id=003;

Query 5:-
 Delete 4 th record from the table.
SQL Statement:-
delete from employee e where e.employee_spec.extract('//name/text()').getStringVal()='Dane';

Question:-
Create a table candixml having candidate id as varchar datatype and resume as xml
datatype. 
The resume is a schema with attributes address, skill à language skill à a) comp skill
b) os skill, experience à a) programmer b) project manager, and objectives.
Insert 5 tuples into the table.
a) Fire the following queries on xml databases.
b) List the candidate name who is good in java and having experience more than 5
years.
c) List candidate having project manager level experience.
d) List name and skill of all candidate.
e) Delete record for address = 'andheri'.
f) Update any record.

create table candixml (id varchar2(10) PRIMARY KEY, resume xmltype);

inserting records

insert into candixml values(001,
xmltype(
'<emp id="1">
<name>Adam</name>
<address>Aplace</address>
<skill>
<compskill>
<lang>java</lang>
<os>linux</os>
</compskill>
</skill>
<expr>
<programer>3</programer>
<proj_mgr>1</proj_mgr>
</expr>
<objective>to become a good programer</objective>
</emp>'));

insert into candixml values(002,
xmltype(
'<emp id="2">
<name>Bob</name>
<address>Bplace</address>
<skill>
<compskill>
<lang>python</lang>
<os>linux</os>
</compskill>
</skill>
<expr>
<programer>2</programer>
<proj_mgr>1</proj_mgr>
</expr>
<objective>to become a good programer</objective>
</emp>'));

insert into candixml values(003,
xmltype(
'<emp id="3">
<name>Cybil</name>
<address>Cplace</address>
<skill>
<compskill>
<lang>C++</lang>
<os>linux</os>
</compskill>
</skill>
<expr>
<programer>6</programer>
<proj_mgr>1</proj_mgr>
</expr>
<objective>to become a good programer</objective>
</emp>'));

insert into candixml values(004,
xmltype(
'<emp id="4">
<name>Dane</name>
<address>Dplace</address>
<skill>
<compskill>
<lang>javascript</lang>
<os>windows</os>
</compskill>
</skill>
<expr>
<programer>3</programer>
<proj_mgr>1</proj_mgr>
</expr>
<objective>to become a good programer</objective>
</emp>'));

insert into candixml values(005,
xmltype(
'<emp id="5">
<name>Emily</name>
<address>Eplace</address>
<skill>
<compskill>
<lang>ruby</lang>
<os>linux</os>
</compskill>
</skill>
<expr>
<programer>3</programer>
<proj_mgr>1</proj_mgr>
</expr>
<objective>to become a good programer</objective>
</emp>'));

insert into candixml values(006,
xmltype(
'<emp id="6">
<name>Frank</name>
<address>Fplace</address>
<skill>
<compskill>
<lang>java</lang>
<os>linux</os>
</compskill>
</skill>
<expr>
<programer>5</programer>
<proj_mgr>1</proj_mgr>
</expr>
<objective>to become a good programer</objective>
</emp>'));

Query 1:-
 List the candidate name who is good in java and having experience more than 5
 years.
SQL Statement:-
select e.resume.getClobval() "employee spec" from candixml e where e.resume.extract('//skill/compskill/lang/text()').getStringVal()='java' and e.resume.extract('//expr/programer/text()').getStringVal()>=5;

Query 2:-
 List candidate having project manager level experience.
SQL Statement:-
select e.resume.extract('emp/name/text()').getStringVal() "EName" 
from candixml e 
where e.resume.existsNode('/emp/expr[proj_mgr>="1"]') = 1;

Query 3:-
 List name and skill of all candidate.
SQL Statement:-
select e.resume.extract('emp/name/text()').getStringVal() "EName",
e.resume.extract('emp/skill/compskill/lang/text()').getStringVal() "ESkillLang",
e.resume.extract('emp/skill/compskill/os/text()').getStringVal() "ESkillNw" from candixml e;

Query 4:-
 Delete record for address = 'andheri'.
SQL Statement:-
delete from candixml e where e.resume.extract('//address/text()').getStringVal() ='Fplace';

Query 5:-
 Update any record. 
SQL Statement:-
update candixml e set resume=XMLType('<emp><name>Tanmay</name></emp>') where id='001';

<patient>
<doctor>
    <doctor_name></doctor_name>
    <specization></specization>
</doctor>
<deisease>
    <diesea1></diesea1>
</deisease>
<medicine>
    <med1></med1>
</medicine>
<location>
    <from></from>
    <admmited to></admmited>
</location>
</patient>


While specifying a char or text of a xml attribute, enclose the text in double 
inverted commas. This explicitly says that the data we are quering for is text.

IS NULL and IS NOT NULL can be helpfull in finding if the data exists at a given
attribute in the table.

existnode() only returns output as 1 or 0

AND and OR operators can be used modify the query condition

the output of a select query can be given a header in char numeric or
special char format. 