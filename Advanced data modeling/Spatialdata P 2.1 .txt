-- Create a table for cola (soft drink) markets in a
-- given geography (such as city or state).
-- Each row will be an area of interest for a specific
-- cola (for example, where the cola is most preferred
-- by residents, where the manufacturer believes the
-- cola has growth potential, and so on).

QUERY :>
CREATE TABLE cola_markets (
  mkt_id NUMBER PRIMARY KEY,
  name VARCHAR2(32),
  shape MDSYS.SDO_GEOMETRY);

-- The next INSERT statement creates an area of interest for 
-- Cola A. This area happens to be a rectangle.
-- The area could represent any user-defined criterion: for
-- example, where Cola A is the preferred drink, where
-- Cola A is under competitive pressure, where Cola A
-- has strong growth potential, and so on.
 

MDSYS.SDO_GEOMETRY(
 SDO_GTYPE NUMBER, 
 SDO_SRID NUMBER,
 SDO_POINT SDO_POINT_TYPE,
 SDO_ELEM_INFO SDO_ELEM_INFO_ARRAY,
 SDO_ORDINATES SDO_ORDINATE_ARRAY
)
For a polygon with holes, enter the exterior boundary first, 
followed by any interior boundaries.
SDO_GTYPE:
Given as > DLXX 
D is the dimension of the object cna be 2,3,4
L is the linear referencing measure dimension for 3D linear referencing sytem
0 for spatial and graph default 
XX is Geometry type > can be
00 > unknown Geometry
01 > point 
02 > line or curve
03 > polygon or surface (multiple ploygon or 3d polygon, all points on same plain)
04 > collection (super set of all other types)
05 > multipoint (superset of point(02))
06 > multipline or multipcurve (superset of line and curve)
07 > multipolygon or multisurface
08 > solid (consist of multiple surfaces and enclosed in 3D space (cuboid or frustum))
09 > multisolid (superset of solid)

SDO_SRID:
Used to identify a coordinate system (spatial reference system) 
to be associated with the geometry
> null for no coordinate system

SDO_POINT:
CREATE TYPE sdo_point_type AS OBJECT (
   X NUMBER,
   Y NUMBER,
   Z NUMBER);
CREATE TYPE sdo_elem_info_array AS VARRAY (1048576) of NUMBER;
CREATE TYPE sdo_ordinate_array AS VARRAY (1048576) of NUMBER;

if SDO_ELEM_INFO and SDO_ORDINATES are both null then the X, Y, and Z values 
are considered to be the coordinates for a point geometry

SDO_ELM_INFO:
Used to know how to interpret the ordinates in SDO_ORDINATES
Defined in Triplets (set of 3 numbers)

1. SDO_STARTING_OFFSET -- Indicates the offset within the 
SDO_ORDINATES array where the first ordinate for this element is stored
SDO_ELM _INFO > 1st number is location of the 1st ordinate of element
indexing (location) value starts from 1 in the array

2. SDO_ETYPE -- Indicates the type of the element.
Valid values >
SDO_ETYPE //> used for 
0 > Type zero element (TODO : read more > zero element)
1 > Point , Point cluster with n points
2 > Lines(straight lines or arcs), NURBS (TODO : read more > NURBS)
1003 or 2003 > polygon, rectangle, circle 
4 > compound line string (consist of straight line and circular arc segments)
1005 or 2005 > compound polygon (consist of straight line and circular arc segments)
1006 or 2006 > surface consisting of 1 or multiple polygon,
                edge sharing between max 2 polygons
1007 >solid

Note : 
here first digit represents exterior > 1 or interior > 2 
1003: exterior polygon ring (must be specified in counterclockwise order)
2003: interior polygon ring (must be specified in clockwise order)
1005: exterior polygon ring (must be specified in counterclockwise order)
2005: interior polygon ring (must be specified in clockwise order)

doubt > If a geometry consists of more than one element, then the last ordinate for an element is always one less than the starting offset for the next element. The last element in the geometry is described by the ordinates from its starting offset to the end of the SDO_ORDINATES varying length array.

3. SDO_INTERPRETATION
Used to interpret element type (compound or not), depended on ETYPE (previous value))
Valid values > 
SDO_ETYPE //, SDO_INTERPRETATION //> Used for
0,(num value) > Type zero element
1,1 > point
1,0 > orientate point
1,n > n is number of points in point cluster and n>1
2,1 > multiple lines connected by straight lines
2,2 > multiple connected circular arcs
2,3 > NURBS (read more)
DL03,1 > polygon with straight lines (enter cyclic points)
DL03,2 > polygon with circular arcs (enter cyclic points)
DL03,3 > rectangle (two points = lower left and upper right)
DL03,4 > circle (3 points)
4,n > n is number of subelements in compound string
DL05,n > n is number of subelements in compound polygon
DL06,n > n is number of polygons that makeup the surface
DL07,n > n can be 1 or 3 (n=3, only 2 3D points are required to define the element) (read more)


SDO_ORDINATES:
Used to give coordinates that define the boundary of the spatial object/element


Inserting values into table
QUERY :>
INSERT INTO table_name VALUES(
    row / index / element number,
    'Nmae_of element'(as string),
    MDSYS.SDO_GEOMETRY(
        SDO_GTYPE, (num)
        SDO_SRID, (num or null)
        SDO_POINT_TYPE, (num or null)
        MDSYS.SDO_ELEM_INFO_ARRAY, (array)
        MDSYS.SDO_ORDINATE_ARRAY (array)
    )
);

INSERT INTO cola_markets VALUES(
    1,
    'cola_a',
    MDSYS.SDO_GEOMETRY(
        2003,
        NULL,
        NULL,
        MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,3),
        MDSYS.SDO_ORDINATE_ARRAY(1,1 , 5,7)
    )
);

INSERT INTO cola_markets VALUES(
    2,
    'cola_b',
    MDSYS.SDO_GEOMETRY(
        2003,
        NULL,
        NULL,
        MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,1),
        MDSYS.SDO_ORDINATE_ARRAY(5,1 , 8,1 , 8,6 , 5,7 ,5,1)
    )
);

done till here in oracle

INSERT INTO cola_markets VALUES(
    3,
    'cola_c',
    MDSYS.SDO_GEOMETRY(
        2003,
        NULL,
        NULL,
        MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,1),
        MDSYS.SDO_ORDINATE_ARRAY(3,3 , 6,3 , 6,5 , 4,5 , 3,3)
    )
);

INSERT INTO cola_markets VALUES(
    4,
    'cola_d',
    MDSYS.SDO_GEOMETRY(
        2003,
        NULL,
        NULL,
        MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,4),
        MDSYS.SDO_ORDINATE_ARRAY(8,7 , 10,9 , 8,11)
    )
);

UPDATE METADATA VIEW 
This is required before the Spatial index can be created.

syntax

INSERT INTO USER_SDO_GEOM_METADATA VALUES(
  TABLE_NAME   VARCHAR2(32),
  COLUMN_NAME  VARCHAR2(32),
  MDSYS.SDO_DIM_ARRAY (SDO_DIM_ARRAY),
  SRID         NUMBER
);

MDSYS.SDO_DIM_ARRAY contians elements named as 
MDSYS.SDO_DIM_ELEMENT and they are defined as follows:

MDSYS.SDO_DIM_ELEMENT(
    SDO_DIMNAME VARCHAR2(64),
    SDO_LB NUMBER,  --lower bound 
    SDO_UB NUMBER,  -- upper bound   
    SDO_TOLERANCE NUMBER
);
The SDO_DIM_ARRAY instance is of size n if there are n dimensions. 
That is, DIMINFO contains 2 SDO_DIM_ELEMENT instances for 2D geometries, 
3 instances for 3D geometries, and 4 instances for 4D geometries.


SDO_LB : 
start point of the coordinate system?
SDO_UB : 
end point of coordinate system?

SDO_TOLERANCE:
The tolerance value is less than the shortest distance between any two sides in any polygon.
Moreover, if you encounter "invalid geometry" errors with inserted or updated geometries, 
and if the geometries are in fact valid, consider increasing the precision of the tolerance value

QUERY :>

INSERT INTO USER_SDO_GEOM_METADATA VALUES (
  'cola_markets',
  'shape',
  MDSYS.SDO_DIM_ARRAY(   
    MDSYS.SDO_DIM_ELEMENT('X', 0, 20, 0.005),
    MDSYS.SDO_DIM_ELEMENT('Y', 0, 20, 0.005)
     ),
  NULL
);

CREATE THE SPATIAL INDEX

syntax
CREATE INDEX index_name
ON table_name(column_name)
INDEXTYPE IS MDSYS.SPATIAL_INDEX
eg

CREATE INDEX cola_spatial_idx
ON cola_markets(shape)
INDEXTYPE IS MDSYS.SPATIAL_INDEX
PARAMETERS('SDO_LEVEL = 8');

SOME SPATIAL QUERIES

Notes : 
Table names and column names get converted to upper case letters while saving.
queries are not case sensitive > data in a row is case sensitive

1. Return the topological intersection of two geometries.

SDO_INTERSECTION syntax :

SDO_GEOM.SDO_INTERSECTION(     
  geom1  IN SDO_GEOMETRY,      
  dim1   IN SDO_DIM_ARRAY,      
  geom2  IN SDO_GEOMETRY,      
  dim2   IN SDO_DIM_ARRAY       
)

or

SDO_GEOM.SDO_INTERSECTION(
    geom1  IN SDO_GEOMETRY,
    geom2  IN SDO_GEOMETRY,      
    tolerance IN NUMBER
)

SELECT SDO_GEOM.SDO_INTERSECTION(c_a.shape, m.diminfo, c_c.shape, m.diminfo)
  FROM cola_markets c_a, cola_markets c_c, user_sdo_geom_metadata m 
  WHERE m.table_name = 'COLA_MARKETS' AND m.column_name = 'SHAPE' 
  AND c_a.name = 'cola_a' AND c_c.name = 'cola_c';

SELECT SDO_GEOM.SDO_INTERSECTION(C_A.SHAPE, M.DIMINFO, C_C.SHAPE, M.DIMINFO)
FROM COLA_MARKETS C_A, COLA_MARKETS C_C, USER_SDO_GEOM_METADATA M
WHERE M.TABLE_NAME='COLA_MARKETS' AND M.COLUMN_NAME = 'SHAPE'
AND C_A.NAME='cola_a' AND C_C.NAME='cola_c';

same query when USER_SDO_GEOM_METADATA is not specified > check by dropping meta data table

SELECT SDO_GEOM.SDO_INTERSECTION(C_A.SHAPE,C_C.SHAPE,1)
FROM COLA_MARKETS C_A, COLA_MARKETS C_C
WHERE C_A.NAME='cola_a' AND C_C.NAME='cola_c';

SELECT SDO_GEOM.SDO_INTERSECTION(C_A.SHAPE,C_C.SHAPE,1)
FROM COLA_MARKETS C_A, COLA_MARKETS C_C;
// 16 ROWS SELECTED


SDO_GEOM.RELATE : 
Examines two geometry objects to determine their spatial relationship.

syntax
SDO_GEOM.RELATE(     
  geom1  IN SDO_GEOMETRY,      
  dim1   IN SDO_DIM_ARRAY,      
  mask   IN VARCHAR2,      
  geom2  IN SDO_GEOMETRY,      
  dim2   IN SDO_DIM_ARRAY       
);

OR 

SDO_GEOM.RELATE(     
  geom1  IN SDO_GEOMETRY,      
  mask   IN VARCHAR2,      
  geom2  IN SDO_GEOMETRY,      
  tol    IN NUMBER       
)
mask keywords :
DETERMINE: returns the one relationship keyword that best matches the geometries.
ANYINTERACT: returns TRUE if the two geometries are not disjoint.
CONTAINS: Returns CONTAINS if the second object is entirely within the first object and the object boundaries do not touch; otherwise, returns FALSE.
COVEREDBY: Returns COVEREDBY if the first object is entirely within the second object and the object boundaries touch at one or more points; otherwise, returns FALSE.
COVERS: Returns COVERS if the second object is entirely within the first object and the boundaries touch in one or more places; otherwise, returns FALSE.
DISJOINT: Returns DISJOINT if the objects have no common boundary or interior points; otherwise, returns FALSE.
EQUAL: Returns EQUAL if the objects share every point of their boundaries and interior, including any holes in the objects; otherwise, returns FALSE.
INSIDE: Returns INSIDE if the first object is entirely within the second object and the object boundaries do not touch; otherwise, returns FALSE.
ON: Returns ON if the boundary and interior of a line (the first object) is completely on the boundary of a polygon (the second object); otherwise, returns FALSE.
OVERLAPBDYDISJOINT: Returns OVERLAPBDYDISJOINT if the objects overlap, but their boundaries do not interact; otherwise, returns FALSE.
OVERLAPBDYINTERSECT: Returns OVERLAPBDYINTERSECT if the objects overlap, and their boundaries intersect in one or more places; otherwise, returns FALSE.
TOUCH: Returns TOUCH if the two objects share a common boundary point, but no interior points; otherwise, returns FALSE.


2. Do two geometries have any spatial relationship?

SELECT SDO_GEOM.RELATE(c_b.shape, m.diminfo, 'anyinteract', 
    c_d.shape, m.diminfo) 
  FROM cola_markets c_b, cola_markets c_d, user_sdo_geom_metadata m 
  WHERE m.table_name = 'COLA_MARKETS' AND m.column_name = 'SHAPE' 
  AND c_b.name = 'cola_b' AND c_d.name = 'cola_d';

SELECT SDO_GEOM.RELATE(c_b.shape, 'DETERMINE', c_c.shape) 
  FROM cola_markets c_b, cola_markets c_c
  WHERE c_b.name = 'cola_b' AND c_c.name = 'cola_c';

3 .Return the areas of all cola markets.

SDO_GEOM.SDO_AREA :
Returns the area of a two-dimensional polygon.
syntax
SDO_GEOM.SDO_AREA(     
  geom  IN SDO_GEOMETRY,      
  dim   IN SDO_DIM_ARRAY     
    [, unit  IN VARCHAR2]      

);
OR
SDO_GEOM.SDO_AREA(     
  geom  IN SDO_GEOMETRY,      
  tol   IN NUMBER       
    [, unit  IN VARCHAR2]      

);

SELECT c.name, SDO_GEOM.SDO_AREA(c.shape, m.diminfo) 
  FROM cola_markets c, user_sdo_geom_metadata m 
  WHERE m.table_name = 'COLA_MARKETS' AND m.column_name = 'SHAPE';

SELECT name, SDO_GEOM.SDO_AREA(shape, 0.005) FROM cola_markets;

4. Return the area of just cola_a.

SELECT c.name, SDO_GEOM.SDO_AREA(c.shape, m.diminfo) 
  FROM cola_markets c, user_sdo_geom_metadata m 
  WHERE m.table_name = 'COLA_MARKETS' AND m.column_name = 'SHAPE' 
  AND c.name = 'cola_a';

SELECT NAME, SDO_GEOM.SDO_AREA(shape,0.005)FROM COLA_MARKETS c
where c.name='cola_a';

5.Return the distance between two geometries.

SDO_GEOM.SDO_DISTANCE :
Computes the minimum distance between two geometry objects, which is the distance between the closest pair of points or segments of the two objects.
syntax :

SDO_GEOM.SDO_DISTANCE(     
  geom1 IN SDO_GEOMETRY,      
  dim1  IN SDO_DIM_ARRAY,      
  geom2 IN SDO_GEOMETRY,      
  dim2  IN SDO_DIM_ARRAY
  [, unit  IN VARCHAR2]      
       
)

OR
SDO_GEOM.SDO_DISTANCE(     
  geom1 IN SDO_GEOMETRY,      
  geom2 IN SDO_GEOMETRY,      
  tol   IN NUMBER       
  [, unit  IN VARCHAR2]      
)

Query :

SELECT SDO_GEOM.SDO_DISTANCE(c_b.shape, m.diminfo, c_d.shape, m.diminfo) 
  FROM cola_markets c_b, cola_markets c_d, user_sdo_geom_metadata m 
  WHERE m.table_name = 'COLA_MARKETS' AND m.column_name = 'SHAPE' 
  AND c_b.name = 'cola_b' AND c_d.name = 'cola_d';

SELECT SDO_GEOM.SDO_DISTANCE(C_B.SHAPE,C_D.SHAPE,0.0005)
FROM COLA_MARKETS C_B, COLA_MARKETS C_D
WHERE C_B.NAME='cola_b' AND C_D.NAME='cola_d';

6.Is a geometry valid?
SDO_GEOM.SDO_VALIDATE_GEOMETRY :
Syntax :

SELECT c.name, SDO_GEOM.VALIDATE_GEOMETRY(c.shape, m.diminfo) 
  FROM cola_markets c, user_sdo_geom_metadata m 
  WHERE m.table_name = 'COLA_MARKETS' AND m.column_name = 'SHAPE' 
  AND c.name = 'cola_c';

7.Is a layer valid? (First, create the results table.)

CREATE TABLE validation_results (mkt_id number, result varchar2(10));

EXECUTE SDO_GEOM.VALIDATE_LAYER('COLA_MARKETS', 'SHAPE', 'MKT_ID', 'VALIDATION_RESULTS');
SELECT * from validation_results;